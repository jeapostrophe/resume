#lang web-server
(require (lib "etc.ss")
         (only-in (lib "file.ss") make-directory*)
         (lib "plt-match.ss")
         (lib "list.ss"))
(require web-server/servlet/bindings)
(require "../fs-persist/fs-persist.ss"
         "../fs-persist/fscache.ss")
(provide (all-defined-out))

;; Caching
(define cache (make-fscache))
(define with-input-from-file/cache (make-with-input-from-file cache))
(define with-output-to-file/cache (make-with-output-to-file cache))

;; Paths
(define system/directory-box
  (box "/web/plt/jay/Resume/root/data/browncs/"))
(define htdocs/directory-box
  (box "/web/plt/jay/Resume/root/htdocs/browncs/"))
(define htdocs-url-part-box
  (box "browncs"))

(define (system/directory)
  (unbox system/directory-box))
(define (set-system/directory! new)
  (set-box! system/directory-box new))
(define (htdocs/directory)
  (unbox htdocs/directory-box))
(define (set-htdocs/directory! new)
  (set-box! htdocs/directory-box new))
(define (htdocs-url-part)
  (unbox htdocs-url-part-box))
(define (set-htdocs-url-part! new)
  (set-box! htdocs-url-part-box new))

(define (logs/directory)
  (string-append (system/directory) "Logs/"))
(define (system/log/failed-login)
  (string-append (logs/directory) "login-failure"))
(define (system/log/fatal-error)
  (string-append (logs/directory) "fatal-errors"))
(define (system/config)
  (string-append (system/directory) "Config/"))
(define (refcode/directory)
  (string-append (system/directory) "Refcodes/"))
(define (applicant/reviewers sanid)
  (string-append (applicant/directory sanid) "reviewers"))
(define (applicant/review sanid csid)
  (string-append (applicant/directory sanid) "review-" csid))
;;; Public files
(define (aggregate/public-directory)
  (string-append (htdocs/directory) "Aggregates/"))
(define (applicant/public-directory sanid)
  (string-append (htdocs/directory) "Applications/" sanid "/"))
(define (internal-path->url filename)
  (regexp-replace (htdocs/directory) filename (string-append "/" (htdocs-url-part) "/")))
(define (applicant/reference-letter sanid refcode)
  (string-append (applicant/public-directory sanid) refcode ".pdf"))
(define (applicant/cover-letter sanid)
  (string-append (applicant/public-directory sanid)
                 sanid "_cover-letter.pdf"))
(define (applicant/cv sanid)
  (string-append (applicant/public-directory sanid)
                 sanid "_cv.pdf"))
(define (applicant/research-stmt sanid)
  (string-append (applicant/public-directory sanid)
                 sanid "_research-stmt.pdf"))
(define (applicant/teaching-stmt sanid)
  (string-append (applicant/public-directory sanid)
                 sanid "_teaching-stmt.pdf"))
(define (applicant/aggregate-letters-tex sanid)
  (string-append (applicant/public-directory sanid)
                 sanid "_aggregate-letters.tex"))
(define (applicant/aggregate-letters sanid)
  (string-append (applicant/public-directory sanid)
                 sanid "_aggregate-letters.pdf"))
(define (applicant/aggregate-tex sanid)
  (string-append (applicant/public-directory sanid)
                 sanid "_aggregate.tex"))
(define (applicant/aggregate sanid)
  (string-append (applicant/public-directory sanid)
                 sanid "_aggregate.pdf"))
(define (app-doc-/url-constructor sanid field)
  (case field
    [(cover-letter) (applicant/cover-letter sanid)]
    [(cv) (applicant/cv sanid)]
    [(research-stmt) (applicant/research-stmt sanid)]
    [(teaching-stmt) (applicant/teaching-stmt sanid)]))

;;; Server
(define-values (host/portname set-host/portname!)
  (bind-to-file (lambda () (string-append (system/config) "host-portname"))
                (lambda () "http://facsearch.cs.brown.edu")))  
(define-values (pdftk-path set-pdftk-path!)
  (bind-to-file (lambda () (string-append (system/config) "pdftk-path"))
                (lambda () "/usr/bin/pdftk")))
(define-values (pdflatex-path set-pdflatex-path!)
  (bind-to-file (lambda () (string-append (system/config) "pdflatex-path"))
                (lambda () "/usr/bin/pdflatex")))
;;; SMTP
(define-values (smtp/server set-smtp/server!)
  (bind-to-file (lambda () (string-append (system/config) "smtp-server"))
                (lambda () "smtps.cs.brown.edu")))
(define-values (smtp/port set-smtp/port!)
  (bind-to-file (lambda () (string-append (system/config) "smtp-port"))
                (lambda () "465")))
(define-values (smtp/username set-smtp/username!)
  (bind-to-file (lambda () (string-append (system/config) "smtp-username"))
                (lambda () "")))
(define-values (smtp/password set-smtp/password!)
  (bind-to-file (lambda () (string-append (system/config) "smtp-password"))
                (lambda () "20")))
;;; Candidate options
(define-values (candidate-areas set-candidate-areas!)
  (bind-to-file (lambda () (string-append (system/config) "candidate-areas"))
                (lambda () empty)))
(define-values (candidate-genders set-candidate-genders!)
  (bind-to-file (lambda () (string-append (system/config) "candidate-genders"))
                (lambda () (list "Unknown"
                                 "Male"
                                 "Female"))))
(define-values (candidate-ethnicities set-candidate-ethnicities!)
  (bind-to-file (lambda () (string-append (system/config) "candidate-ethnicities"))
                (lambda () (list "Unknown"
                                 "Black, non-Hispanic"
                                 "American Indian or Alaskan Native"
                                 "Asian or Pacific Islander"
                                 "Hispanic"
                                 "White, non-Hispanic"
                                 "Other"))))
(define-values (candidate-decisions set-candidate-decisions!)
  (bind-to-file (lambda () (string-append (system/config) "candidate-decisions"))
                (lambda () (list "Undecided"
                                 "Rejected"))))
;;; Reviewers
(define-values (reviewers/directory
                reviewers
                reviewer/directory
                reviewer-exists?)
  (bind-within-directory (lambda () (string-append (system/directory) "reviewers/"))))
(define-values (reviewer-student? set-reviewer-student?!)
  (bind-to-file (lambda (csid) (string-append (reviewer/directory csid) "student?"))
                (lambda () #f)))
(define-values (reviewer-password set-reviewer-password!)
  (bind-to-file (lambda (csid) (string-append (reviewer/directory csid) "password"))
                (lambda () #f)))
(define-values (reviewer-email set-reviewer-email!)
  (bind-to-file (lambda (csid) (string-append (reviewer/directory csid) "email"))
                (lambda () #f)))
;;; Applicant
(define-values (applications/directory
                applicants
                applicant/directory
                applicant-exists?)
  (bind-within-directory (lambda () (string-append (system/directory) "applicants/"))))
(define (make-applicant! sanid fname lname password email)
  (make-directory* (applicant/directory sanid))
  (set-applicant-fname! sanid fname)
  (set-applicant-lname! sanid lname)
  (set-applicant-date-received! sanid (current-seconds))
  (set-applicant-password! sanid password)
  (set-applicant-email! sanid email))  
(define (write-applicant-contact-info! sanid bindings)
  (set-applicant-email! sanid (extract-binding/single 'email bindings))
  (set-applicant-web-home! sanid (extract-binding/single 'web-home bindings))
  (set-applicant-web-app! sanid (extract-binding/single 'web-app bindings))
  (set-applicant-work-phone! sanid (extract-binding/single 'work-phone bindings))
  (set-applicant-home-phone! sanid (extract-binding/single 'home-phone bindings))
  (set-applicant-mobile-phone! sanid (extract-binding/single 'mobile-phone bindings))
  (set-applicant-postal! sanid (extract-binding/single 'postal bindings)))

(define-values (applicant-areas set-applicant-areas!)
  (bind-to-file (lambda (sanid) (string-append (applicant/directory sanid) "area"))
                (lambda () empty)))
(define-values (applicant-gender set-applicant-gender!)
  (bind-to-file (lambda (sanid) (string-append (applicant/directory sanid) "gender"))
                (lambda () (first (candidate-genders)))))
(define-values (applicant-ethnicity set-applicant-ethnicity!)
  (bind-to-file (lambda (sanid) (string-append (applicant/directory sanid) "ethnicity"))
                (lambda () (first (candidate-ethnicities)))))
(define-values (applicant-decision set-applicant-decision!)
  (bind-to-file (lambda (sanid) (string-append (applicant/directory sanid) "decision"))
                (lambda () (first (candidate-decisions)))))
(define-values (applicant-fname set-applicant-fname!)
  (bind-to-file (lambda (sanid) (string-append (applicant/directory sanid) "applicant-fname"))
                (lambda () "")))
(define-values (applicant-lname set-applicant-lname!)
  (bind-to-file (lambda (sanid) (string-append (applicant/directory sanid) "applicant-lname"))
                (lambda () "")))
(define-values (applicant-date-received set-applicant-date-received!)
  (bind-to-file (lambda (sanid) (string-append (applicant/directory sanid) "applicant-date-received"))
                (lambda () (current-seconds))))
(define-values (applicant-email set-applicant-email!)
  (bind-to-file (lambda (sanid) (string-append (applicant/directory sanid) "email"))
                (lambda () "")))
(define-values (applicant-password set-applicant-password!)
  (bind-to-file (lambda (sanid) (string-append (applicant/directory sanid) "password"))
                (lambda () "")))
(define-values (applicant-web-home set-applicant-web-home!)
  (bind-to-file (lambda (sanid) (string-append (applicant/directory sanid) "web-home"))
                (lambda () "")))
(define-values (applicant-web-app set-applicant-web-app!)
  (bind-to-file (lambda (sanid) (string-append (applicant/directory sanid) "web-app"))
                (lambda () "")))
(define-values (applicant-work-phone set-applicant-work-phone!)
  (bind-to-file (lambda (sanid) (string-append (applicant/directory sanid) "work-phone"))
                (lambda () "")))
(define-values (applicant-home-phone set-applicant-home-phone!)
  (bind-to-file (lambda (sanid) (string-append (applicant/directory sanid) "home-phone"))
                (lambda () "")))
(define-values (applicant-mobile-phone set-applicant-mobile-phone!)
  (bind-to-file (lambda (sanid) (string-append (applicant/directory sanid) "mobile-phone"))
                (lambda () "")))
(define-values (applicant-postal set-applicant-postal!)
  (bind-to-file (lambda (sanid) (string-append (applicant/directory sanid) "postal"))
                (lambda () "")))
;;;; Letter writers
(define-values (applicant/letter-writers/directory
                applicant-letter-writers
                applicant/letter-writer/directory
                applicant-letter-writers-exists?)
  (bind-within-directory (lambda (sanid) (string-append (applicant/directory sanid) "letter-writers/"))))
(define-values (applicant-letter-writer-name set-applicant-letter-writer-name!)
  (bind-to-file (lambda (sanid refcode) (string-append (applicant/letter-writer/directory sanid refcode) "name"))
                (lambda () #f)))
(define-values (applicant-letter-writer-institution set-applicant-letter-writer-institution!)
  (bind-to-file (lambda (sanid refcode) (string-append (applicant/letter-writer/directory sanid refcode) "institution"))
                (lambda () #f)))
(define-values (applicant-letter-writer-email set-applicant-letter-writer-email!)
  (bind-to-file (lambda (sanid refcode) (string-append (applicant/letter-writer/directory sanid refcode) "email"))
                (lambda () #f)))
(define-values (applicant-letter-writer-comments set-applicant-letter-writer-comments!)
  (bind-to-file (lambda (sanid refcode) (string-append (applicant/letter-writer/directory sanid refcode) "comments"))
                (lambda () "")))

(define (make-applicant-letter-writer! sanid n i e)
  (define refcode (next-refcode))
  (set-refcode-data! refcode sanid)
  (set-applicant-letter-writer-name! sanid refcode n)
  (set-applicant-letter-writer-institution! sanid refcode i)
  (set-applicant-letter-writer-email! sanid refcode e)
  refcode)
;;;;; Reviews
(define-values (applicant-review-score set-applicant-review-score!)
  (bind-to-file (lambda (sanid csid) (string-append (applicant/directory sanid) "reviews/" csid "/score"))
                (lambda () #f)))
(define-values (applicant-review-comments set-applicant-review-comments!)
  (bind-to-file (lambda (sanid csid) (string-append (applicant/directory sanid) "reviews/" csid "/comments"))
                (lambda () #f)))
(define (review-comments-exists? sanid csid)
  (and (applicant-review-comments sanid csid) #t))
(define (review-score-exists? sanid csid)
  (and (applicant-review-score sanid csid) #t))
(define (read-reviewers sanid)
  (filter (lambda (csid)
            (review-comments-exists? sanid csid))
          (reviewers)))
(define (read-reviewers/check csid sanid)
  (if (reviewer-student? csid)
      (if (review-comments-exists? csid sanid)
          (list csid)
          empty)
      (read-reviewers sanid)))
;;; Dept. Settings
(define-values (dept/program set-dept/program!)
  (bind-to-file (lambda () (string-append (system/config) "dept-program"))
                (lambda () "Computer Science Department")))
(define-values (dept/univ set-dept/univ!)
  (bind-to-file (lambda () (string-append (system/config) "dept-univ"))
                (lambda () "Brown University")))
(define-values (dept/program-at-univ/short set-dept/program-at-univ/short!)
  (bind-to-file (lambda () (string-append (system/config) "dept-program-at-univ-short"))
                (lambda () "Brown CompSci")))
(define-values (dept/contact-name set-dept/contact-name!)
  (bind-to-file (lambda () (string-append (system/config) "dept-contact-name"))
                (lambda () "Lori Agresti")))
(define-values (dept/contact-title set-dept/contact-title!)
  (bind-to-file (lambda () (string-append (system/config) "dept-contact-title"))
                (lambda () "Administrative Assistant to the Search Committee")))
(define-values (dept/contact-phone set-dept/contact-phone!)
  (bind-to-file (lambda () (string-append (system/config) "dept-contact-phone"))
                (lambda () "+1 401-263-7614")))
(define-values (dept/contact-email set-dept/contact-email!)
  (bind-to-file (lambda () (string-append (system/config) "dept-contact-email"))
                (lambda () "facapp06@cs.brown.edu")))
;;; Admin
(define-values (admin-password set-admin-password!)
  (bind-to-file (lambda (admin) (string-append (system/config) "admin/password"))
                (lambda () "admin")))

(define admin-exists? 
  (match-lambda
    ["admin" #t]
    [_ #f]))
;;; Refcode
(define sample-refcode "7pwl1930")
(define (refcode/file refcode)
  (string-append (refcode/directory) refcode))
(define-values (refcode-data set-refcode-data!)
  (bind-to-file refcode/file
                (lambda () #f)))
(define (refcode-exists? refcode)
  (file-exists? (refcode/file refcode)))

(define (make-letter i)
  (let ([n (random 36)])
    (cond
      [(< n 10) (integer->char (+ n 48))]
      [else     (integer->char (+ n 87))])))
(define (next-refcode)
  (define name 
    (apply string (build-list 8 make-letter)))
  (if (or (refcode-exists? name) (string=? name sample-refcode))
      (next-refcode)
      name))

;; Old Settings
(define review-scoring-table
  '((7 "Top candidate. May be better than current faculty!")
    (6 "Very promising. Would like to interview.")
    (5 "Worth considering. Strong pubs and letters.")
    (4 "OK. No strong support or objection. Decent pubs and letters.")
    (3 "Marginal. I'd be concerned if this is the best we can do.")
    (2 "Weak. Others may see something I'm missing.")
    (1 "Extremely weak. Absolutely no way.")
    (0 "Out of area.")))

(define (reference-letter-exists? sanid refcode)
  (file-exists? (applicant/reference-letter sanid refcode)))